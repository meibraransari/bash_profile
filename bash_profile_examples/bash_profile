#!/bin/bash
###################################
# Author: Ibrar Ansari
# Date: 15-05-2025
# Version: 1
#
# This is my profile script
###################################

########################
## Installation steps ##
########################
# nano ~/.bash_profile
# source ~/.bash_profile
alias reload='source ~/.bash_profile && source ~/.bashrc'

###################
##    Docker     ##
###################

function add_users_to_docker_group() {
  # Get a list of all manually created users
  users=$(awk -F':' '$3 >= 1000 && $1 != "nobody" { print $1 }' /etc/passwd)
  # Loop through the list of users
  for user in $users; do
    # Add the user to the "docker" group
    sudo usermod -aG docker $user
  done
}

install_docker() {
    cd /tmp/ && curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo groupadd docker
    add_users_to_docker_group
    sudo systemctl enable docker
    sudo systemctl restart docker
    echo ""
    echo "Reboot required so, kindly reboot system"
}

install_docker_compose() {
	sudo curl -L "https://github.com/docker/compose/releases/download/v2.26.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
	sudo chmod +x /usr/local/bin/docker-compose
	cp -a /usr/local/bin/docker-compose /usr/bin/docker-compose
    sudo apt-get install docker-compose-plugin >  /dev/null 2>&1
	docker-compose -v
    echo ""
    echo "Docker-compose installed!..."
}


alias dps="docker ps -a"
alias dpe='clear && docker ps -a -f "status=exited"'
alias dpi='clear >$(tty) && echo -e "List of running containers" && docker ps --format "table {{.ID}}\t{{.RunningFor}}\t{{.Status}}\t{{.Image}}\t{{.Names}}"'
alias dpp='clear >$(tty) && docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Ports}}"'
alias dpia='clear >$(tty) && docker ps --format "table {{.Names}}\t{{.ID}}\t{{.Status}}\t{{.Ports}}\t{{.Image}}\t{{.Command}}\{{.RunningFor}}\{{.Status}}"'
alias dpl="docker pull $1"
alias dis="docker images"
alias drn="docker run -itd $1 $2"
alias dsp="docker stop $1"
alias dspa='docker stop $(docker ps -aq)'
alias dst="docker start $1"
alias drt="docker restart $1"
alias dre="docker rename $1"
alias dls="docker logs -fn 20 $1"
alias drm="docker rm $1 -f"
alias dri="docker rmi $1 -f"
alias dit="docker inspect $1"
alias dvl="docker volume ls"
alias dsd="docker system df -v"
alias dss="docker stats"
alias drs='docker rm $(docker ps -q -f status=exited) -f'
alias dhy="docker history $1"
alias ddi='docker rmi $(docker images --filter "dangling=true" -q --no-trunc)'
alias durn="docker update --restart=no $1"
alias dura="docker update --restart=always $1"
alias dcr="docker ps -aq | xargs docker inspect --format '{{.Name}} Restart: {{ .HostConfig.RestartPolicy.Name }}'"

dec() {
  docker exec -it "$@" bash
}

decx() {
  docker exec -it "$@" sh
}

dhp() {
	echo "dpl = docker pull"
	echo "dis = docker images"
	echo "drn = docker run -itd 2=name 2=image"
	echo "dps = docker ps -a"
	echo "dpi = Formatted by Ibrar"
	echo "dpp = Formatted ports"
	echo "dsp = docker stop"
    echo "dspa = docker stop All"
    echo "dst = docker start"
	echo "drt = docker restart"
	echo "dre = docker rename"
	echo "dec = docker exec -it"
	echo "dls = docker logs"
	echo "drm = docker rm -f"
	echo "dri = docker rmi -f"
	echo "dit = docker inspect"
	echo "dvl = docker volume ls"
	echo "dss = docker stats"
    echo "dsd = docker system df -v #==> Check disk space used by docker"
	echo "drs = docker rm $(docker ps -q -f status=exited)"
	echo "dhy = docker history"
	echo "ddi = docker rmi $(docker images --filter "dangling=true" -q --no-trunc)"
	echo "durn = docker update --restart=no <Container>"
    echo "dura = docker update --restart=always <Container>"
    echo "dcr = docker inspect restart policy"
}


###################
##    Docker  Compose   ##
###################
# Defined in the `docker-compose` plugin, please check there for details.
alias c=docker-compose "$@"
alias cb='docker-compose build'
alias cup='docker-compose up -d'
alias cr='docker-compose run --service-ports --rm'
alias crl='docker-compose run --service-ports --rm local'
alias crd='docker-compose run --service-ports --rm develop'
alias crt='docker-compose run --rm test'
alias crp='docker-compose run --rm provision'
alias crci='docker-compose run --rm ci'
alias crwt='docker-compose run --rm watchtest'
alias cps='docker-compose ps'
alias cls='docker-compose logs -f --tail 100'

crm(){
	docker-compose stop $1
	docker-compose rm --force $1
}

dup() {
    # Check if the new `docker compose` command exists by checking its version
    if docker compose version > /dev/null 2>&1; then
        # Use the newer 'docker compose' command
        #echo "Using 'docker compose up -d'"
        docker compose up -d
    elif docker-compose version > /dev/null 2>&1; then
        # Fallback to the older 'docker-compose' command
        #echo "Using 'docker-compose up -d'"
        docker-compose up -d
    else
        # If neither command is found
        echo "Error: Docker Compose not found!"
        return 1
    fi
}


ddown() {
    # Check if the new `docker compose` command exists by checking its version
    if docker compose version > /dev/null 2>&1; then
        # Use the newer 'docker compose' command
        #echo "Using 'docker compose down'"
        docker compose down
    elif docker-compose version > /dev/null 2>&1; then
        # Fallback to the older 'docker-compose' command
        #echo "Using 'docker-compose down'"
        docker-compose down
    else
        # If neither command is found
        echo "Error: Docker Compose not found!"
        return 1
    fi
}


function kchlp ()
{
cat << 'EOF'
Type kc [TAB][TAB] for auto completion....
k       ='kubectl'
kc      ='kubectl'
kcg     ='kubectl get'
kcd     ='kubectl describe'
kcl     ='kubectl logs'
kcci    ='kubectl cluster-info'
kcgn    ='kubectl get node -o wide'
kcgs    ='kubectl get service -o wide'
kcgr    ='kubectl get rs -o wide | more'
kcgd    ='kubectl get deployment -o wide'
kcgp    ='kubectl get pod -o wide'
kcga    ='kubectl get all -o wide | more'
kcgaa   ='kubectl get all --all-namespaces -o wide | more'
kcgns   ='kubectl get namespaces  -o wide | more'
kcsec   ='kubectl get secrets'
kcgcm   ='kubectl get configmaps'
kcgev   ='kubectl get events --all-namespaces'
kcdp    ='kubectl describe pod'
kcds    ='kubectl describe service'
kcdd    ='kubectl describe deployment'
kcdr    ='kubectl describe rs | more'
kcaf    ='kubectl apply -f'
kcdf    ='kubectl delete -f'
kclf    ='kubectl logs --tail=200  -f'
kcar    ='kubectl api-resources | more' # list resources name and kind
kcav    ='{ kubectl explain $1 | head -n 2; } # Find API version'
kcge    ='kubectl get $1 $2 -o yaml | more; } # Examine object'
kces    ='kubectl edit $1 $2; } # Edit object'

EOF
}

#------------------------------ Alias ----------------------------------#
# need to add
# kubectl config view
# kubectl get secret
# https://kubernetes.io/docs/reference/kubectl/cheatsheet/
# kubectl
export KUBE_EDITOR='vim'
alias k='kubectl'
alias kc='kubectl'
alias kcg='kubectl get'
alias kcd='kubectl describe'
alias kcl='kubectl logs'
alias kcci='kubectl cluster-info'
alias kcar='kubectl api-resources | more' # list resources name and kind
function kcav() { kubectl explain $1 | head -n 2; } # Find API version
function kcsl() { kubectl get $1 --show-labels; } # Show labels
#alias kcav='kubectl explain | head -n 2' # Find API version

# Get
alias kcga='kubectl get all -o wide | more'
alias kcgns='kubectl get namespaces  -o wide | more'
alias kcgaa='kubectl get all --all-namespaces -o wide | more'
alias kcgn='kubectl get nodes -o wide | more'
alias kcgp='kubectl get pod -o wide | more'
alias kcgs='kubectl get service -o wide'
alias kcgr='kubectl get rs -o wide | more'
alias kcgd='kubectl get deployment -o wide | more'
alias kcgcm='kubectl get configmaps'
alias kcsec='kubectl get secrets'
alias kcgev='kubectl get events --all-namespaces'

# Describe
alias kcdp='kubectl describe pod | more'
alias kcds='kubectl describe service | more'
alias kcdd='kubectl describe deployment | more'
alias kcdr='kubectl describe rs | more'

# Apply
alias kcaf='kubectl apply -f'
alias kcdf='kubectl delete -f'
# Log
alias kclf='kubectl logs --tail=200  -f'

# Edit Service
function kcge() { kubectl get $1 $2 -o yaml | more; } # Examine object
function kces() { kubectl edit $1 $2; } # Edit object
#function kces() { kubectl edit svc/@1; } # Edit Service

#------------------------------ Small Function ----------------------------------#
function kcfp() { kubectl get pod -o wide| grep $@; }
function kcfs() { kubectl get service -o wide| grep $@; } 
function kcfd() { kubectl get deployment -o wide | grep $@; }
function kcxsh() { kubectl exec -ti $@ sh; }
function kcxbash() { kubectl exec -ti $@ bash; }
function hl() { helm list $@; }
function hh() { helm history $(helm list -q $@); }
function gcm() { kubectl get configmap $@ -o yaml; }
function kclfl() { kubectl logs --tail=$@  -f; }
function kcph() { kubectl exec -ti $@ -- sh -c 'apk -q update; apk add -q curl jq; curl localhost:8080/__health | jq'; }

#------------------------------ Big Function ----------------------------------#
function kcpf() { 
    result=$(kubectl get pod | grep -m1 $@)
        exitCode=$?
        if [ ! "$exitCode" -eq 0 ]; then
        echo "Could not find pod matching [$@]."
        return 1;   
    fi
        podName=$(echo $result | awk '{print $1}')
    echo "Forwarding port 8080 of $podName to local port 8080"
    kubectl port-forward $podName 8080:8080
}
function kclfa() {
    result=($(kubectl get pod | grep $@))
    exitCode=$?
        if [ ! "$exitCode" -eq 0 ]; then
                echo "Could not find pod matching [$@]."
                return 1;       
        fi
    read -n 1 -p "Press any key for logs of ${result[0]} and ${result[5]}"
    (kubectl logs --tail=10 -f ${result[0]} & kubectl logs --tail=10 -f ${result[5]} &) | tee
}
function kclff(){
    result=($(kubectl get pod | grep $1))
        exitCode=$?
        if [ ! "$exitCode" -eq 0 ]; then
                echo "Could not find pod matching [$@]."
                return 1;
        fi
    echo "Showing logs for ${result[0]}"
    kubectl logs --tail=200 -f ${result[0]}
}
function kcops(){
    kubectl proxy &
    docker run -it --net=host hjacobs/kube-ops-view &
    xdg-open http://localhost:8080 &
} 

function kcstop() {
    echo "Stopping $1"
    desired_replicas=$(kubectl get deployments --selector=app=$1 -o jsonpath='{$.items[0].spec.replicas}');
    kubectl scale --replicas=0 deployments/$1;
    current_replicas=$(kubectl get deployments --selector=app=$1 -o jsonpath='{$.items[0].status.availableReplicas}')
    while [ ! -z "$current_replicas" ]; do
                sleep 1;
                current_replicas=$(kubectl get deployments --selector=app=$1 -o jsonpath='{$.items[0].status.availableReplicas}')
        done;
    echo "Stopped [$desired_replicas] instances of $1."
    return $desiredReplicas
}
function kcstart() {
    echo "Scaling deployment $1 up to $2 replicas...";
        kubectl scale --replicas=$2 deployments/$1;
        if [ "$3" == "skipCheck" ]; then
                echo "Skipping healthchecks"
                return
        fi
        default_sleep=10
        initial_sleep=$(kubectl get deployments --selector=app=$1 -o jsonpath='{$.items[0].spec.template.spec.containers[0].readinessProbe.initialDelaySeconds}')
        initial_sleep=${initial_sleep:-10}
        echo "Waiting $initial_sleep seconds for the first readiness probe check..."
        sleep $initial_sleep
        period_sleep=$(kubectl get deployments --selector=app=$1 -o jsonpath='{$.items[0].spec.template.spec.containers[0].readinessProbe.periodSeconds}')
        period_sleep=${period_sleep:-10}
        while [ "$current_replicas" != "$2" ]; do
                echo "Waiting $period_sleep seconds until checking the node count"
                sleep $period_sleep
                current_replicas=$(kubectl get deployments --selector=app=$1 -o jsonpath='{$.items[0].status.availableReplicas}')
                current_replicas=${current_replicas:-0}
                echo "Current nr of replicas: $current_replicas"
        done;
        echo "$1 restarted"
}
function kcres() {
    echo "Scaling $1"
    desired_replicas=$(kubectl get deployments --selector=app=$1 -o jsonpath='{$.items[0].spec.replicas}');
    echo "Desired nf or replicas: $desired_replicas";
        echo "Scaling deployment $1 down to 0 replicas...";
        kubectl scale --replicas=0 deployments/$1;
    current_replicas=$(kubectl get deployments --selector=app=$1 -o jsonpath='{$.items[0].status.availableReplicas}')
    while [ ! -z "$current_replicas" ]; do
        sleep 1;
            current_replicas=$(kubectl get deployments --selector=app=$1 -o jsonpath='{$.items[0].status.availableReplicas}')
    done;
    echo "Scaling deployment $1 up to $desired_replicas replicas...";
    kubectl scale --replicas=$desired_replicas deployments/$1;
    if [ "$2" == "skipCheck" ]; then
        echo "Skipping healthchecks"
        return
    fi

    default_sleep=10
    initial_sleep=$(kubectl get deployments --selector=app=$1 -o jsonpath='{$.items[0].spec.template.spec.containers[0].readinessProbe.initialDelaySeconds}')
    initial_sleep=${initial_sleep:-10}
    echo "Waiting $initial_sleep seconds for the first readiness probe check..."
        sleep $initial_sleep
    period_sleep=$(kubectl get deployments --selector=app=$1 -o jsonpath='{$.items[0].spec.template.spec.containers[0].readinessProbe.periodSeconds}')
    period_sleep=${period_sleep:-10}
    while [ "$current_replicas" != "$desired_replicas" ]; do
        echo "Waiting $period_sleep seconds until checking the node count"
        sleep $period_sleep
        current_replicas=$(kubectl get deployments --selector=app=$1 -o jsonpath='{$.items[0].status.availableReplicas}')
                current_replicas=${current_replicas:-0}
                echo "Current nr of replicas: $current_replicas"
        done;
    echo "$1 restarted"
}
function kcgnt() { for machine in $(kcgn | tail -n +2 | awk '{ print $1 }' ); do echo -n "${machine}: "; echo $(kc describe node $machine | grep -i "node-role\|role="); done | sort -k 2; }
function kcstat() {
    for node in  $(kubectl get nodes | tail -n +2 | awk '{print $1}'); do 
        echo $node
        echo -e "$(kubectl describe node $node | grep -A 4 "Allocated resources")\n";
    done
}
function kcready() {
        for node in  $(kubectl get nodes | tail -n +2 | awk '{print $1}'); do
                echo $node
                echo -e "$(kubectl describe node $node | grep  "Ready")\n";
        done
}


#---------------------------------------------------------------------------------------------------------------------------------------
#   5.  GIT SHORTCUTS
#---------------------------------------------------------------------------------------------------------------------------------------
function gcl {
    git clone ssh://git@github.com/$1/$2.git;
}

function gacp {
    git add -A;
    git commit -m "$1";
    git push origin $2;
}
alias gitstats='git-stats'
alias gits='git status -s'
alias gita='git add -A && git status -s'
alias gitcom='git commit -am'
alias gitacom='git add -A && git commit -am'
alias gitc='git checkout'
alias gitcm='git checkout master'
alias gitcd='git checkout development'
alias gitcgh='git checkout gh-pages'
alias gitb='git branch'
alias gitcb='git checkout -b'
alias gitdb='git branch -d'
alias gitDb='git branch -D'
alias gitdr='git push origin --delete'
alias gitf='git fetch'
alias gitr='git rebase'
alias gitp='git push -u'
alias gitpl='git pull'
alias gitfr='git fetch && git rebase'
alias gitfrp='git fetch && git rebase && git push -u'
alias gitpo='git push -u origin'
alias gitpom='git push -u origin master'
alias gitphm='git push heroku master'
alias gitm='git merge'
alias gitmd='git merge development'
alias gitmm='git merge master'
alias gitcl='git clone'
alias gitclr='git clone --recursive'
alias gitamend='git commit --amend'
alias gitundo='git reset --soft HEAD~1'
alias gitm2gh='git checkout gh-pages && git merge master && git push -u && git checkout master'
alias gitrao='git remote add origin'
alias gitrso='git remote set-url origin'
alias gittrack='git update-index --no-assume-unchanged'
alias gituntrack='git update-index --assume-unchanged'
alias gitpls='git submodule foreach git pull origin master'
alias gitremoveremote='git rm -r --cached'
alias gitcount="git shortlog -sne"
alias gitlog="git log --oneline"
alias gitlog-full="git log --graph --abbrev-commit --decorate --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)'"
alias gitlog-changes="git log --oneline --decorate --stat --graph --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)'"
gitdbr() { git branch -d "$@" && git push origin --delete "$@"; }
gitupstream() { git branch --set-upstream-to="$@"; }
gitreset() {
    if [ -z "$1" ]; then
        while true; do
            read -ep 'Reset to HEAD? [y/N] ' response
            case $response in
                [Yy]* )
                    bash -c 'git reset --hard HEAD'
                    break;;
                * )
                    echo 'Skipped resetting to HEAD...'
                    break;;
            esac
        done
    else
        while true; do
            read -ep "Reset to $1? [y/N] " response
            case $response in
                [Yy]* )
                    bash -c "git reset --hard $1"
                    break;;
                * )
                    echo "Skipped resetting to $1..."
                    break;;
            esac
        done
    fi
}

gitrinse() {
    if [[ "$1" == "all" ]]; then
        while true; do
            read -ep "Are you sure you want to gitrinse this repo and it's submodules? [y/N] " response
            case $response in
                [Yy]* )
                    git clean -xfd;
                    git submodule foreach --recursive git clean -xfd;
                    git reset --hard;
                    git submodule foreach --recursive git reset --hard;
                    git submodule update --init --recursive;
                    break;;
                * )
                    echo "Skipped gitrinse..."
                    break;;
            esac
        done
    else
        while true; do
            read -ep "Are you sure you want to gitrinse this repo's submodules? [y/N] " response
            case $response in
                [Yy]* )
                    git submodule foreach --recursive git clean -xfd;
                    git submodule foreach --recursive git reset --hard;
                    git submodule update --init --recursive;
                    break;;
                * )
                    echo "Skipped gitrinse..."
                    break;;
            esac
        done
    fi

}


